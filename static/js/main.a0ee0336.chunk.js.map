{"version":3,"sources":["api/api.ts","api/movies.txt","components/MoviesList/MoviesList.tsx","components/MovieDetails/MovieDetails.tsx","components/NewMovieForm/NewMovieForm.tsx","App.tsx","index.tsx"],"names":["API_URL","getAllMovies","a","fetch","method","headers","redirect","response","ok","Error","status","statusText","json","result","data","getMovieByID","movieId","createMovie","movie","body","JSON","stringify","deleteMovie","MoviesList","selectedMovieId","preparedMovies","seeMovieDetails","closeMovieDetails","updateMovies","className","map","title","year","type","onClick","id","MovieDetails","React","memo","movies","useState","setMovie","loadMovieDetails","selectedMovie","find","useEffect","console","log","format","actors","actor","name","NewMovieForm","setTitle","setYear","setFormat","setActors","unformattedActors","setUnformattedActors","handleInputChange","event","target","value","Number","preparedActors","split","handleSubmit","preventDefault","onSubmit","htmlFor","placeholder","onChange","App","setMovies","titleToSearch","setTitleToSearch","actorToSearch","setActorToSearch","isSortedAlphabetically","setIsSortedAlphabetically","setSelectedMovieId","loadDetailedMovies","moviesIds","Promise","all","detailedMovies","filteredMovies","useMemo","filter","toLowerCase","includes","some","sort","movie1","movie2","localeCompare","toLocaleLowerCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0ee0336.chunk.js","sourcesContent":["import { Movie } from \"../types\";\nimport movies from './movies.txt';\n\nconst API_URL = 'http://localhost:8000/api/v1/movies';\n\n\n// downoload movies to the doker\n  export const sendMovies = async () => {\n    try {\n      const formData = new FormData();\n      const formattedMovies = await fetch(movies).then(response => response.blob());\n\n      formData.append(\"movies\", formattedMovies);\n\n      const response = await fetch(`${API_URL}/import`, {\n        method: 'POST',\n        headers: {\n          'Authorization':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwZXRyb0BnbWFpbC5jb20iLCJuYW1lIjoiUGV0cm92IFBldHJvIiwiY3JlYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwidXBkYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwiaWF0IjoxNjM4NzE4MDI4fQ.sCPMPn24hgEA6CIQJADGYh35YjJk11mJI9Zj7KcstXg',\n        },\n        body: formData,\n        redirect: 'follow',\n      });\n\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    } catch (error) {\n      throw new Error(`The problem is here ${error}`);\n    }\n  };\n\n// downoload movies from server\nexport const getAllMovies = async () => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'GET',\n      headers: {\n        'Authorization':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwZXRyb0BnbWFpbC5jb20iLCJuYW1lIjoiUGV0cm92IFBldHJvIiwiY3JlYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwidXBkYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwiaWF0IjoxNjM4NzE4MDI4fQ.sCPMPn24hgEA6CIQJADGYh35YjJk11mJI9Zj7KcstXg',\n      },\n      redirect: 'follow',\n    });\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    return result.data;\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n\nexport const getMovieByID = async (movieId: number) => {\n  try {\n    const response = await fetch(`${API_URL}/${movieId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwZXRyb0BnbWFpbC5jb20iLCJuYW1lIjoiUGV0cm92IFBldHJvIiwiY3JlYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwidXBkYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwiaWF0IjoxNjM4NzE4MDI4fQ.sCPMPn24hgEA6CIQJADGYh35YjJk11mJI9Zj7KcstXg',\n      },\n      redirect: 'follow',\n    });\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    return result.data;\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n\n// create new movie on server\nexport const createMovie = async (movie: Omit<Movie, 'id'>) => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwZXRyb0BnbWFpbC5jb20iLCJuYW1lIjoiUGV0cm92IFBldHJvIiwiY3JlYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwidXBkYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwiaWF0IjoxNjM4NzE4MDI4fQ.sCPMPn24hgEA6CIQJADGYh35YjJk11mJI9Zj7KcstXg',\n    },\n    body: JSON.stringify(movie),\n    redirect: 'follow',\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\n// delete movie from server\nexport const deleteMovie = async (movieId: number) => {\n  const response = await fetch(`http://localhost:8000/api/v1/movies/${movieId}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwZXRyb0BnbWFpbC5jb20iLCJuYW1lIjoiUGV0cm92IFBldHJvIiwiY3JlYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwidXBkYXRlZEF0IjoiMjAyMS0xMi0wNVQxNToyNzowOC42MTJaIiwiaWF0IjoxNjM4NzE4MDI4fQ.sCPMPn24hgEA6CIQJADGYh35YjJk11mJI9Zj7KcstXg',\n    },\n    redirect: 'follow',\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\n","export default __webpack_public_path__ + \"static/media/movies.1ceaf0e8.txt\";","import React from 'react';\nimport { Movie } from '../../types';\nimport './MoviesList.css';\n\nimport { deleteMovie } from '../../api/api';\n\ntype Props = {\n  selectedMovieId: number,\n  preparedMovies: Movie[],\n  seeMovieDetails: (movieId: number) => void,\n  closeMovieDetails: () => void,\n  updateMovies: () => void,\n}\n\nexport const MoviesList: React.FC<Props> = ({\n  selectedMovieId,\n  preparedMovies,\n  seeMovieDetails,\n  closeMovieDetails,\n  updateMovies\n}) => {\n  return (\n    <div className=\"MoviesList\">\n      <h2>\n        Movies List\n      </h2>\n\n      <ul className=\"MoviesList__list\">\n        {preparedMovies.map(movie => (\n          <li\n            key={movie.id}\n            className=\"MoviesList__item\"\n          >\n            {`${movie.title}, ${movie.year}`}\n\n            <div className=\"MovieList__buttons\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  deleteMovie(movie.id);\n                  updateMovies();\n                }}\n              >\n                Delete movie\n              </button>\n\n              {movie.id === selectedMovieId ? (\n                <button\n                type=\"button\"\n                onClick={closeMovieDetails}\n              >\n                Close\n              </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  onClick={() => seeMovieDetails(movie.id)}\n                >\n                View details\n              </button>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { Movie } from '../../types';\nimport './MovieDetails.css';\n\ntype Props = {\n  movieId: number,\n  movies: Movie[]\n}\n\nexport const MovieDetails: React.FC<Props> = React.memo(\n  ({ movieId, movies }) => {\n    const [ movie, setMovie ] = useState<Movie>();\n  \n    const loadMovieDetails = async () => {\n      const selectedMovie = movies.find(movie => movie.id === movieId);\n  \n      setMovie(selectedMovie);\n    }\n  \n    useEffect(() => {\n      loadMovieDetails();\n    }, [movieId]);\n\n    console.log(movie);\n\n    return (\n      <div className=\"MovieDetail\">\n        {movie ? (\n        <>\n          <h2>\n            {`${movie.title}, ${movie.year}`}\n          </h2>\n\n          <p>\n            {`Format: ${movie.format}`}\n          </p>\n\n          <ul className=\"MovieDetail__actors\">\n            Actors:\n            {movie.actors.map(actor => (\n              <li\n                key={actor.name}\n                className=\"MovieDetail__actor\"\n              >\n                {actor.name}\n              </li>\n            ))}\n          </ul>\n        </>\n        ) : (\n          <h2>\n            No movie found\n          </h2>\n        )}\n      </div>\n    )\n  }\n);\n","import React, { useState } from 'react';\nimport './NewMovieForm.css'\nimport { createMovie } from '../../api/api';\nimport { Actor } from '../../types';\n\ntype Props = {\n  updateMovies: () => void,\n}\n\nexport const NewMovieForm: React.FC<Props> = React.memo(\n    ({ updateMovies }) => {\n    const [title, setTitle] = useState('');\n    const [year, setYear] = useState(2021);\n    const [format, setFormat] = useState('');\n    const [actors, setActors] = useState<Actor[]>([]);\n    const [unformattedActors, setUnformattedActors] = useState<string>('');\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n      const { name, value } = event.target\n\n      switch (name) {\n        case 'title':\n          setTitle(value);\n          break;\n        case 'year':\n          setYear(Number(value));\n          break;\n        case 'format':\n          setFormat(value);\n          break;\n        case 'actors':\n          setUnformattedActors(value);\n          const actors = value.split(',');\n\n          const preparedActors = actors.map(actor => {\n            const actorToAdd = {\n              name: actor,\n            }\n            return actorToAdd;\n          });\n\n          setActors(preparedActors);\n          break;\n        default:;\n      }\n    }\n\n    const clearForm = () => {\n      setTitle('');\n      setYear(2021);\n      setFormat('');\n      setActors([]);\n    }\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      const newMovie = await createMovie({\n        title,\n        year,\n        format,\n        actors,\n      });\n\n      if (newMovie) {\n        updateMovies();\n      }\n\n      clearForm();\n    };\n\n    return (\n      <form\n        className=\"NewMovieForm\"\n        onSubmit={handleSubmit}\n      >\n        <label htmlFor=\"title\">\n          Title:\n          <input\n            className=\"NewMovieForm__input\"\n            type=\"text\"\n            id=\"title\"\n            placeholder=\"Enter title\"\n            value={title}\n            name=\"title\"\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <label htmlFor=\"year\">\n          Year:\n          <input\n            className=\"NewMovieForm__input\"\n            type=\"text\"\n            id=\"year\"\n            placeholder=\"Enter year\"\n            value={year}\n            name=\"year\"\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <label htmlFor=\"format\">\n          Format:\n          <select\n            className=\"NewMovieForm__input\"\n            id=\"format\"\n            value={format}\n            name=\"format\"\n            onChange={handleInputChange}\n          >\n            <option value=\"\">\n              Choose a format\n            </option>\n\n            <option value=\"VHS\">\n              VHS\n            </option>\n\n            <option value=\"DVD\">\n              DVD\n            </option>\n\n            <option value=\"Blu-Ray\">\n              Blu-Ray\n            </option>\n          </select>\n        </label>\n\n        <label htmlFor=\"actors\">\n          Actors:\n          <input\n            className=\"NewMovieForm__input\"\n            type=\"text\"\n            id=\"actors\"\n            placeholder=\"Enter actors divided by , \"\n            value={unformattedActors}\n            name=\"actors\"\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          className=\"NewMovieForm__button\"\n        >\n          Add a movie\n        </button>\n      </form>\n    )\n  }\n)","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport './normalization.css'\nimport { Movie } from './types';\nimport { sendMovies, getAllMovies, getMovieByID } from './api/api';\n\nimport { MoviesList } from './components/MoviesList/MoviesList';\nimport { MovieDetails } from './components/MovieDetails/MovieDetails';\nimport { NewMovieForm } from './components/NewMovieForm/NewMovieForm';\n\nconst App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>();\n  const [titleToSearch, setTitleToSearch] = useState('');\n  const [actorToSearch, setActorToSearch] = useState('');\n  const [isSortedAlphabetically, setIsSortedAlphabetically] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState(0);\n\n  const loadDetailedMovies = async () => {\n    const movies: Movie[] = await getAllMovies();\n    const moviesIds = movies.map(movie => movie.id)\n\n    const detailedMovies = await Promise.all(moviesIds.map((id: number) =>getMovieByID(id)))\n\n    setMovies(detailedMovies)\n  }\n\n  useEffect(() => {\n    loadDetailedMovies();\n  }, []);\n\n  const filteredMovies = useMemo(() => {\n    if (movies) {\n      return movies\n        .filter(movie => {\n          if (titleToSearch) {\n            return movie.title.toLowerCase().includes(titleToSearch)\n          }\n\n          return movie;\n        })\n        .filter(movie => {\n          if (actorToSearch) {\n            return movie.actors.some(actor => actor.name.toLowerCase().includes(actorToSearch))\n          }\n\n          return movie;\n        })\n        .sort((movie1, movie2) => {\n          if (isSortedAlphabetically) {\n            return movie1.title.localeCompare(movie2.title);\n          }\n\n          return 0;\n        });\n    }\n  }, [movies, titleToSearch, actorToSearch, isSortedAlphabetically]);\n\n  // processing controlled inputs for searching by title and actor\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target\n\n    switch (name) {\n      case 'titleToSearch':\n        setTitleToSearch(value.toLocaleLowerCase());\n        break;\n      case 'actorToSearch':\n        setActorToSearch(value.toLocaleLowerCase());\n        break;\n      default:;\n    }\n  }\n\n  // reset all filters and sorting\n  const handleResetButton = () => {\n    setTitleToSearch('');\n    setActorToSearch('');\n    setIsSortedAlphabetically(false);\n  }\n\n  // set movie id to render movie details\n  const seeMovieDetails = (movieId: number) => {\n    setSelectedMovieId(movieId);\n  }\n\n  // reset rendering movie details\n  const closeMovieDetails = () => {\n    setSelectedMovieId(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <div className=\"App__form\">\n          <NewMovieForm updateMovies={loadDetailedMovies} />\n        </div>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {filteredMovies && (\n            <>\n              <div className=\"App__filters\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter title\"\n                  value={titleToSearch}\n                  name=\"titleToSearch\"\n                  onChange={handleInputChange}\n                />\n\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter actor\"\n                  value={actorToSearch}\n                  name=\"actorToSearch\"\n                  onChange={handleInputChange}\n                />\n\n                <button\n                  type=\"button\"\n                  onClick={() => setIsSortedAlphabetically(true)}\n                >\n                  Sort alphabetically\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={handleResetButton}\n                >\n                  Reset\n                </button>\n              </div>\n\n              <MoviesList\n                selectedMovieId={selectedMovieId}\n                preparedMovies={filteredMovies}\n                seeMovieDetails={seeMovieDetails}\n                closeMovieDetails={closeMovieDetails}\n                updateMovies={loadDetailedMovies}\n              />\n            </>\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedMovieId > 0 && filteredMovies && (\n            <MovieDetails\n              movieId={selectedMovieId}\n              movies={filteredMovies}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}