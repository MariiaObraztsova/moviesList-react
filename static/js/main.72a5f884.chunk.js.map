{"version":3,"sources":["components/MoviesList/MoviesList.tsx","components/MovieDetails/MovieDetails.tsx","App.tsx","index.tsx"],"names":["MoviesList","selectedMovieId","preparedMovies","seeMovieDetails","closeMovieDetails","className","map","movie","title","year","id","type","onClick","movies","format","actors","MovieDetails","React","memo","movieId","useState","setMovie","useEffect","movieFromServer","find","item","actor","moviesFromDoc","App","setMovies","titleToSearch","setTitleToSearch","actorToSearch","setActorToSearch","isSortedAlphabetically","setIsSortedAlphabetically","setSelectedMovieId","moviesFromServer","filter","toLowerCase","includes","some","sort","movie1","movie2","localeCompare","handleInputChange","event","target","name","value","toLocaleLowerCase","placeholder","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72a5f884.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types';\nimport './MoviesList.css';\n\ntype Props = {\n  selectedMovieId: number,\n  preparedMovies: Movie[],\n  seeMovieDetails: (movieId: number) => void,\n  closeMovieDetails: () => void,\n}\n\nexport const MoviesList: React.FC<Props> = ({\n  selectedMovieId,\n  preparedMovies,\n  seeMovieDetails,\n  closeMovieDetails,\n}) => {\n  return (\n    <div className=\"MoviesList\">\n      <h2>\n        Movies List\n      </h2>\n\n      <ul className=\"MoviesList__list\">\n        {preparedMovies.map(movie => (\n          <li\n            key={movie.id}\n            className=\"MoviesList__item\"\n          >\n            {`${movie.title}, ${movie.year}`}\n            {movie.id === selectedMovieId ? (\n              <button\n              type=\"button\"\n              onClick={closeMovieDetails}\n            >\n              Close\n            </button>\n            ) : (\n              <button\n                type=\"button\"\n                onClick={() => seeMovieDetails(movie.id)}\n              >\n              View details\n            </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { Movie } from '../../types';\nimport './MovieDetails.css';\n\nconst movies: Movie[] = [\n  {\n    id: 1,\n    title: \"Casablanca\",\n    year: 1942,\n    format: \"DVD\",\n    actors: [\n        \"Humphrey Bogartt\",\n        \"Ingrid Bergman\",\n        \"Claude Rains\",\n        \"Peter Lorre\"\n    ]\n  },\n  {\n    id: 2,\n    title: \"Blazing Saddles\",\n    year: 1974,\n    format: \"VHS\",\n    actors: [\n      \"Mel Brooks\", \"Clevon Little\", \"Harvey Korman\", \"Gene Wilder\", \"Slim Pickens\", \"Madeline Kahn\"\n    ]\n  }\n];\n\ntype Props = {\n  movieId: number,\n}\n\nexport const MovieDetails: React.FC<Props> = React.memo(\n  ({ movieId }) => {\n    const [ movie, setMovie ] = useState<Movie>();\n  \n    // const loadMovieDetails = () => {\n    //   const movieFromServer = movies.find(item => item.id === movieId);\n  \n    //   setMovie(movieFromServer);\n    // }\n  \n    useEffect(() => {\n      const movieFromServer = movies.find(item => item.id === movieId);\n  \n      setMovie(movieFromServer);\n    }, [movieId]);\n\n    return (\n      <div className=\"MovieDetail\">\n        {movie ? (\n        <>\n          <h2>\n            {`${movie.title}, ${movie?.year}`}\n          </h2>\n\n          <p>\n            {`Format: ${movie.format}`}\n          </p>\n\n          <ul className=\"MovieDetail__actors\">\n            Actors:\n            {movie.actors.map(actor => (\n              <li\n                key={actor}\n                className=\"MovieDetail__actor\"\n              >\n                {actor}\n              </li>\n            ))}\n          </ul>\n        </>\n        ) : (\n          <h2>\n            No movie found\n          </h2>\n        )}\n      </div>\n    )\n  }\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './normalization.css'\nimport { Movie } from './types';\n\nimport { MoviesList } from './components/MoviesList/MoviesList';\nimport { MovieDetails } from './components/MovieDetails/MovieDetails';\n\nconst moviesFromDoc: Movie[] = [\n  {\n    id: 1,\n    title: \"Casablanca\",\n    year: 1942,\n    format: \"DVD\",\n    actors: [\n        \"Humphrey Bogartt\",\n        \"Ingrid Bergman\",\n        \"Claude Rains\",\n        \"Peter Lorre\"\n    ]\n  },\n  {\n    id: 2,\n    title: \"Blazing Saddles\",\n    year: 1974,\n    format: \"VHS\",\n    actors: [\n      \"Mel Brooks\", \"Clevon Little\", \"Harvey Korman\", \"Gene Wilder\", \"Slim Pickens\", \"Madeline Kahn\"\n    ]\n  }\n];\n\nconst App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>();\n  const [titleToSearch, setTitleToSearch] = useState('');\n  const [actorToSearch, setActorToSearch] = useState('');\n  const [isSortedAlphabetically, setIsSortedAlphabetically] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState(0);\n\n  useEffect(() => {\n    const filterMovies = () => {\n      return moviesFromDoc\n      .filter(movie => {\n        if (titleToSearch) {\n          return movie.title.toLowerCase().includes(titleToSearch)\n        }\n  \n        return movie;\n      })\n      .filter(movie => {\n        if (actorToSearch) {\n          return movie.actors.some(actor => actor.toLowerCase().includes(actorToSearch))\n        }\n  \n        return movie;\n      })\n      .sort((movie1, movie2) => {\n        if (isSortedAlphabetically) {\n          return movie1.title.localeCompare(movie2.title);\n        }\n  \n        return 0;\n      });\n    }\n\n    const moviesFromServer = filterMovies();\n    setMovies(moviesFromServer);\n  }, [titleToSearch, actorToSearch, isSortedAlphabetically])\n\n  // processing controlled inputs for searching by title and actor\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target\n\n    switch (name) {\n      case 'titleToSearch':\n        setTitleToSearch(value.toLocaleLowerCase());\n        break;\n      case 'actorToSearch':\n        setActorToSearch(value.toLocaleLowerCase());\n        break;\n      default:;\n    }\n  }\n\n  // reset all filters and sorting\n  const handleResetButton = () => {\n    setTitleToSearch('');\n    setActorToSearch('');\n    setIsSortedAlphabetically(false);\n  }\n\n  // set movie id to render movie details\n  const seeMovieDetails = (movieId: number) => {\n    setSelectedMovieId(movieId);\n  }\n\n  // reset rendering movie details\n  const closeMovieDetails = () => {\n    setSelectedMovieId(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter title\"\n          value={titleToSearch}\n          name=\"titleToSearch\"\n          onChange={handleInputChange}\n        />\n\n        <input\n          type=\"text\"\n          placeholder=\"Enter actor\"\n          value={actorToSearch}\n          name=\"actorToSearch\"\n          onChange={handleInputChange}\n        />\n\n        <button\n          type=\"button\"\n          onClick={() => setIsSortedAlphabetically(true)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleResetButton}\n        >\n          Reset\n        </button>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {movies && (\n            <MoviesList\n              selectedMovieId={selectedMovieId}\n              preparedMovies={movies}\n              seeMovieDetails={seeMovieDetails}\n              closeMovieDetails={closeMovieDetails}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedMovieId > 0 && (\n            <MovieDetails\n              movieId={selectedMovieId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}